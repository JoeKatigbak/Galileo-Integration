#include <SPI.h>
#include <Ethernet.h>
#include <SoftwareSerial.h>
#define SIM800_TX_PIN 2
#define SIM800_RX_PIN 3
SoftwareSerial serialSIM800(SIM800_TX_PIN,SIM800_RX_PIN);
int ESPdata = 0;
String readString;            //necessary string function to timeout after string has been read.
int led = 9;                 //Declare digital pin
int pwm = A0;                 //Declare analog pin
byte mac[] =
{
  0x00, 0xAA, 0xBB, 0xCC, 0xDE, 0x02
};

EthernetClient client;

void setup() {
  pinMode(5, INPUT);          //Set pin 5 as input from ESP
  pinMode(6, OUTPUT);         //Set pin 6 as output LED

  serialSIM800.begin(9600);
   Serial.begin(9600);   //Begin Bluetooth Serial Comms.
  pinMode(led, OUTPUT);       //Set Led as Input
  pinMode(pwm, INPUT);        //Set Led as Output

  if (Ethernet.begin(mac) == 0)
  {
    Serial.println("Failed to configure Ethernet using DHCP");
    // no point in carrying on, so do nothing forevermore:
    for (;;)
      ;
  }
  // print your local IP address:
  printIPAddress();
  
}

void loop() {
  ESPdata = digitalRead(5);         //read data from ESP

  if (ESPdata == LOW)
  {
    digitalWrite(6, LOW);
    }
  else 
  {
    digitalWrite(6,HIGH);
    }
  float val = analogRead(pwm);      //Read A0 value
  float volts = val/205;            //Equates directly to the amount of Voltage recieved by input
  Serial.println(volts);            //Prints value
  delay(100);


  
  
  while(Serial.available()){      //Checks Serial Availability for bluetooth transmission  
    delay(50);
    char c=Serial.read();         //Reads the letters one by one
    readString+=c;                //Combines it into the readString function, function breaks after input string is acknowledged. It will loop and stack if you use a made string Ex: readStrin, string1.
  }
  if(readString.length()>0){      //Checks is their is data in transmission
    Serial.println(readString);   //Prints the received data
    
    if (readString =="on"){     
    digitalWrite(led, HIGH);      //If Bluetooth receives "on" from the readString function it will do its command turning the LED ON.
      delay(500);
    }
    if (readString =="off"){
    digitalWrite(led, LOW);       //If Bluetooth receives "off" from the readString function it will do its command turning the LED OFF.
      delay(500);
    }
    if (readString =="GSM"){
    Serial.write(serialSIM800.read());
    serialSIM800.write("AT+CMGF=1\r"); //sending SMS in text mode
    delay(1000);
    Serial.println("AT+CMGF=1\r");       
    serialSIM800.write("AT+CMGS=\"+639175603150\"\r"); // phone number
    delay(1000);
    Serial.println("AT+CMGS=\"+639175603150\"\r");       
    serialSIM800.write("Hello parang salamat\r"); // message
    delay(1000);
    Serial.println("Hello parang salamat\r"); 
    delay(1000);
    serialSIM800.write(0x1A);
    //send a Ctrl+Z (end of the message)
    delay(1000);
    Serial.println("SMS sent successfully");
    }
    readString="";                //Clears the readString function allowing and accepting new data to come through.
  }
 
}

void printIPAddress()
{
  Serial.print("My IP address: ");
  for (byte thisByte = 0; thisByte < 4; thisByte++) {
    // print the value of each byte of the IP address:
    Serial.print(Ethernet.localIP()[thisByte], DEC);
    Serial.print(".");
  }
  Serial.println();
}